#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use lib '/home/mark/src/bif/.direnv/perl5/lib/perl5/';
use DBI;
use DBIx::Model;
use GraphViz2;
use OptArgs;

arg dsn => (
    isa      => 'Str',
    comment  => 'DBI connection string',
    required => 1,
);

arg output => (
    isa      => 'Str',
    comment  => 'graphviz output filename',
    required => 1,
);

opt exclude => (
    alias   => 'e',
    isa     => 'ArrayRef',
    comment => 'table name(s) to exclude',
    default => sub { [] },
);

opt driver => (
    alias   => 'd',
    isa     => 'Str',
    comment => 'the graphivz driver',
    default => 'dot',
);

opt help => (
    alias   => 'h',
    isa     => 'Bool',
    comment => 'print full help message and exit',
    ishelp  => 1,
);

opt name => (
    isa     => 'Str',
    comment => 'name of the database',
);

my $opts = optargs;
$opts->{dsn} = 'dbi:SQLite:dbname=' . $opts->{dsn} if -f $opts->{dsn};
$opts->{name} ||= $opts->{dsn} =~ s/[^a-zA-z]+/_/gr =~ s/((^_)|(_$))//gr;
$opts->{format} = $opts->{output} =~ s/.*\.(.*)/$1/r;

my $dbh = DBI->connect( $opts->{dsn} );
my $db  = $dbh->model(
    name    => $opts->{dsn},
    exclude => $opts->{exclude},
);

sub exclude {
    my $name = shift;
    my $list = shift;
    foreach my $try (@$list) {
        return 1 if $name =~ m/$try/;
    }
    return 0;
}

my $graph = GraphViz2->new(
    graph => {
        label   => $db->name,
        rankdir => 'TB',
    },
    edge   => { color => 'grey' },
    global => {
        directed => 1,
        driver   => $opts->{driver},
        name     => $opts->{name},
    },
    graph => { rankdir => 'TB' },
    node  => {
        color => 'grey',
        shape => 'oval',
    },
);

foreach my $table ( $db->tables ) {
    next if exclude( $table->name, $opts->{exclude} );

    my @labels = ( { text => '{<' . $table->name . '>' . $table->name } );
    my $i = 1;
    foreach my $col ( $table->columns ) {
        push(
            @labels,
            {
                port => '<' . $col->name . '>',
                text => $col->name . ' ' . $col->type,
            }
        );
    }

    $labels[$#labels]->{text} .= '}';

    $graph->add_node(
        name  => $table->name,
        label => \@labels,
    );
}

my %seen;

foreach my $fk ( map { $_->foreign_keys } $db->tables ) {
    next if exclude( $fk->table->name,    $opts->{exclude} );
    next if exclude( $fk->to_table->name, $opts->{exclude} );

    my @fcols = $fk->columns;
    my @tcols = $fk->to_columns;
    foreach my $i ( 0 .. $#fcols ) {
        my $fcol = $fcols[$i];
        my $tcol = $tcols[$i];

        next if $seen{ $fcol->full_name . $tcol->full_name }++;

        $graph->add_edge(
            from => $fk->table->name . ':' . $fcol->name,
            to   => $fk->to_table->name . ':' . $tcol->name,
        );
    }
}

unlink $opts->{output};

$graph->run(
    format      => $opts->{format},
    output_file => $opts->{output},
);

